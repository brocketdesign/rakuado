extends ../../base

block mainContent
  .container.mt-5
    h1.text-center.mb-4 A/Bテスト結果
    .d-flex.justify-content-between.align-items-center
      .text-right.mb-3
        a.btn.btn-primary.shadow-0(href="/dashboard/app/create-ab-test") 新規作成
      .text-right.mb-3
        button.btn.btn-primary.shadow-0.showCreditShopButton(type="button") 
          span.user-credits.me-2 0
          | クレジット

    //- フィルタリングフォーム (Removed Affiliate ID filter as per your request)
    form#filterForm(method="GET" action="/app/ab-test-results")
      .form-row.align-items-end
        //- You can add other filters here if needed in the future

    //- Results Display
    if results.length > 0
      .row
        each test in results
          .col-md-6.mb-4
            .card.shadow-sm
              .card-header.d-flex.justify-content-between.align-items-center.bg-dark.text-white
                span 作成日: #{new Date(test.uploadDate).toLocaleDateString('ja-JP')}
                //- Activate/Deactivate Switch
                label.switch
                  input(type="checkbox" class="activate-toggle" data-test-id=test.testId checked=(test.active ? 'checked' : undefined))
                  span.slider.round

              .card-body
                //- Variants Display
                .row
                  //- Variant A
                  .col-md-6.mb-3
                    h5.text-center バリアント A
                    img(src=test.images[0].imageUrl, class="img-fluid mb-2 rounded", alt=`${test.images[0].imageName}の画像`)
                    p.font-weight-bold.text-center #{test.images[0].imageName}
                    p.text-center
                      | クリック数: #{test.images[0].clickCount}
                      br
                      | 表示数: #{test.images[0].viewCount}
                      br
                      - var conversionA = test.images[0].viewCount > 0 ? ((test.images[0].clickCount / test.images[0].viewCount) * 100).toFixed(2) : '0.00';
                      | コンバージョン率: #{conversionA}%
                    a.btn.btn-sm.btn-outline-primary.mt-2.w-100(
                        href=test.images[0].targetUrl, 
                        target="_blank",
                        onclick=`registerClickAndView('${test.testId}', '${test.images[0].imageId}')`
                    ) ターゲットURLを見る

                  //- Variant B
                  .col-md-6.mb-3
                    h5.text-center バリアント B
                    img(src=test.images[1].imageUrl, class="img-fluid mb-2 rounded", alt=`${test.images[1].imageName}の画像`)
                    p.font-weight-bold.text-center #{test.images[1].imageName}
                    p.text-center
                      | クリック数: #{test.images[1].clickCount}
                      br
                      | 表示数: #{test.images[1].viewCount}
                      br
                      - var conversionB = test.images[1].viewCount > 0 ? ((test.images[1].clickCount / test.images[1].viewCount) * 100).toFixed(2) : '0.00';
                      | コンバージョン率: #{conversionB}%
                    a.btn.btn-sm.btn-outline-primary.mt-2.w-100(
                        href=test.images[1].targetUrl, 
                        target="_blank",
                        onclick=`registerClickAndView('${test.testId}', '${test.images[1].imageId}')`
                    ) ターゲットURLを見る

              .card-footer.d-flex.justify-content-between
                //- Delete Button
                button.btn.btn-danger.btn-sm.delete-button(type="button" data-test-id=test.testId)
                  | 削除

    else
      .alert.alert-info.mt-4(role="alert")
        | 指定された条件に一致するA/Bテスト結果が見つかりませんでした。

  //- Optional: Add some spacing at the bottom
  .mb-5

  //- Custom CSS for the toggle switch
  style.
    /* Toggle Switch Styles */
    .switch {
      position: relative;
      display: inline-block;
      width: 50px;
      height: 24px;
    }

    .switch input { 
      opacity: 0;
      width: 0;
      height: 0;
    }

    .slider {
      position: absolute;
      cursor: pointer;
      top: 0;
      left: 0;
      right: 0;
      bottom: 0;
      background-color: #ccc;
      transition: .4s;
      border-radius: 24px;
    }

    .slider:before {
      position: absolute;
      content: "";
      height: 18px;
      width: 18px;
      left: 3px;
      bottom: 3px;
      background-color: white;
      transition: .4s;
      border-radius: 50%;
    }

    input:checked + .slider {
      background-color: #28a745;
    }

    input:focus + .slider {
      box-shadow: 0 0 1px #28a745;
    }

    input:checked + .slider:before {
      transform: translateX(26px);
    }

    /* Rounded sliders */
    .slider.round {
      border-radius: 24px;
    }

    .slider.round:before {
      border-radius: 50%;
    }

  //- JavaScript for handling activation/deactivation and deletion
  script.
    // Function to register click and view events
    function registerClickAndView(testId, imageId) {
      const affiliateId = document.body.getAttribute('data-affiliate-id');

      // Register the view event
      fetch(`/api/abtest/register-view?affiliateId=${affiliateId}&testId=${testId}&imageId=${imageId}`, {
        method: 'GET',
      })
      .then(response => response.json())
      .then(data => {
        if (!response.ok) {
          console.error('View registration failed:', data.error);
        }
        // Optionally handle success
      })
      .catch(error => console.error('Error registering view:', error));

      // Register the click event using sendBeacon
      window.addEventListener('beforeunload', function() {
        navigator.sendBeacon(`/api/abtest/register-click?affiliateId=${affiliateId}&testId=${testId}&imageId=${imageId}`);
      });
    }

    document.addEventListener('DOMContentLoaded', () => {
      // Handle Activate/Deactivate Toggle
      document.querySelectorAll('.activate-toggle').forEach(toggle => {
        toggle.addEventListener('change', async (event) => {
          const testId = event.target.getAttribute('data-test-id');
          const isActive = event.target.checked;

          try {
            const response = await fetch(`/api/abtest/activate-test`, {
              method: 'PATCH',
              headers: {
                'Content-Type': 'application/json'
              },
              body: JSON.stringify({ testId, active: isActive })
            });

            const result = await response.json();
            if (!response.ok) {
              throw new Error(result.error || 'Failed to update status.');
            }
            // Optionally, show a success message
            showNotification(`A/Bテストは${isActive ? 'アクティブ' : '非アクティブ'}に設定されました。`,'success');
          } catch (error) {
            showNotification(`エラー: ${error.message}`,'error');
            // Revert the toggle if there's an error
            event.target.checked = !isActive;
          }
        });
      });

      // Handle Delete Button
      document.querySelectorAll('.delete-button').forEach(button => {
        button.addEventListener('click', async (event) => {
          const testId = event.target.getAttribute('data-test-id');
          if (!confirm('本当にこのA/Bテストを削除しますか？')) return;

          try {
            const response = await fetch(`/api/abtest/delete-ab-test/${testId}`, {
              method: 'DELETE'
            });

            const result = await response.json();
            if (!response.ok) {
              throw new Error(result.error || 'Failed to delete A/B test.');
            }
            // Optionally, remove the card from the DOM without reloading
            alert('A/Bテストが正常に削除されました。');
            // Remove the card
            const card = button.closest('.col-md-6');
            if (card) {
              card.remove();
            }
          } catch (error) {
            alert(`エラー: ${error.message}`);
          }
        });
      });
    });
